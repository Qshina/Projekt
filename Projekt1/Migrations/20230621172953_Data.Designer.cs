// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt.Model;

#nullable disable

namespace Projekt.Migrations
{
    [DbContext(typeof(MusicContext))]
    [Migration("20230621172953_Data")]
    partial class Data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("GenresTracks", b =>
                {
                    b.Property<int>("Genresid_genre")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tracksid_track")
                        .HasColumnType("INTEGER");

                    b.HasKey("Genresid_genre", "Tracksid_track");

                    b.HasIndex("Tracksid_track");

                    b.ToTable("GenresTracks");
                });

            modelBuilder.Entity("Projekt.Model.Albums", b =>
                {
                    b.Property<int>("id_album")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Artistsid_artist")
                        .HasColumnType("INTEGER");

                    b.Property<string>("album_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("id_artist")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_album");

                    b.HasIndex("Artistsid_artist");

                    b.ToTable("Album", (string)null);
                });

            modelBuilder.Entity("Projekt.Model.Artists", b =>
                {
                    b.Property<int>("id_artist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("artist_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("creation_year")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_artist");

                    b.ToTable("Artist", (string)null);
                });

            modelBuilder.Entity("Projekt.Model.Clients", b =>
                {
                    b.Property<int>("id_client")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("regular_customer")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_client");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Projekt.Model.Genres", b =>
                {
                    b.Property<int>("id_genre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id_genre");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Projekt.Model.Purchases", b =>
                {
                    b.Property<int>("id_purchases")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Albumsid_album")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Clientsid_client")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("date_of_purchase")
                        .HasColumnType("TEXT");

                    b.Property<int?>("id_cd")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_client")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("price")
                        .HasColumnType("TEXT");

                    b.HasKey("id_purchases");

                    b.HasIndex("Albumsid_album");

                    b.HasIndex("Clientsid_client");

                    b.ToTable("Purchase", (string)null);
                });

            modelBuilder.Entity("Projekt.Model.Tracks", b =>
                {
                    b.Property<int>("id_track")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Albumsid_album")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_album")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id_track");

                    b.HasIndex("Albumsid_album");

                    b.ToTable("Track", (string)null);
                });

            modelBuilder.Entity("GenresTracks", b =>
                {
                    b.HasOne("Projekt.Model.Genres", null)
                        .WithMany()
                        .HasForeignKey("Genresid_genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt.Model.Tracks", null)
                        .WithMany()
                        .HasForeignKey("Tracksid_track")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projekt.Model.Albums", b =>
                {
                    b.HasOne("Projekt.Model.Artists", "Artists")
                        .WithMany("Albums")
                        .HasForeignKey("Artistsid_artist")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artists");
                });

            modelBuilder.Entity("Projekt.Model.Purchases", b =>
                {
                    b.HasOne("Projekt.Model.Albums", "Albums")
                        .WithMany("Purchases")
                        .HasForeignKey("Albumsid_album")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt.Model.Clients", "Clients")
                        .WithMany("Purchases")
                        .HasForeignKey("Clientsid_client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Albums");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Projekt.Model.Tracks", b =>
                {
                    b.HasOne("Projekt.Model.Albums", "Albums")
                        .WithMany("Tracks")
                        .HasForeignKey("Albumsid_album")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Projekt.Model.Albums", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Projekt.Model.Artists", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Projekt.Model.Clients", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
